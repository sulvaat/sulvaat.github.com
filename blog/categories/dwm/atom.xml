<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dwm | Nihonhut]]></title>
  <link href="http://sulvaat.github.com/blog/categories/dwm/atom.xml" rel="self"/>
  <link href="http://sulvaat.github.com/"/>
  <updated>2012-03-16T13:34:45-04:00</updated>
  <id>http://sulvaat.github.com/</id>
  <author>
    <name><![CDATA[sul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using dwm Continued]]></title>
    <link href="http://sulvaat.github.com/blog/2012/03/16/useing-dwm-continued/"/>
    <updated>2012-03-16T08:20:00-04:00</updated>
    <id>http://sulvaat.github.com/blog/2012/03/16/useing-dwm-continued</id>
    <content type="html"><![CDATA[<p>In my last guide, I quickly skimmed over the basics of getting dwm going in an arch linux machine. Now lets get some post-install configureation to get something that looks nice as well as works nice.</p>

<h2>Urxvt</h2>


<p>We told dwm to use dwm last time so lets get the stuff most users are looking for in a terminal - mainly transparency. Configuration for urxvt is done via the <code>.Xdefaults</code> file which it lookds for in <code>$HOME</code>.</p>

<p>```
URxvt*termName: rxvt</p>

<h2>borderless and no scrollbar</h2>

<p> URxvt<em>scrollBar_right: false
 URxvt</em>scrollBar: false
 URxvt*borderLess: false</p>

<h2>teh transparency stuff</h2>

<p> URxvt<em>inheritPixmap: true
 URxvt</em>tintColor: white
 URxvt*shading: 40</p>

<h2>change default colors</h2>

<p> URxvt<em>background: #000000
 URxvt</em>foreground: #3300ff
 URxvt<em>color0: #000000
 URxvt</em>color1: #A80000
 URxvt<em>color2: #00A800
 URxvt</em>color3: #A85400
 URxvt<em>color4: #0000A8
 URxvt</em>color5: #A800A8
 URxvt<em>color6: #00A8A8
 URxvt</em>color7: #A8A8A8
 URxvt<em>color8: #545054
 URxvt</em>color9: #F85450
 URxvt<em>color10: #50FC50
 URxvt</em>color11: #F2FC50
 URxvt<em>color12: #5054F8
 URxvt</em>color13: #F854F8
 URxvt<em>color14: #50FCF8
 URxvt</em>color15: #F8FCF8
```</p>

<p>My <code>.Xdefaults</code> is a good start but by far not all the things urxvt can do.</p>

<h2>Getting around dwm</h2>


<p>A quick list of the most used hotkeys in dwm</p>

<ul>
<li>alt+q - Bails out of dwm and brings you back to the command prompt.</li>
<li>alt+shift+c - Simply closes the current window.</li>
<li>alt+1-5 - Switches your desktop, holding shift while doing this moves the current window to that desktop.</li>
<li>alt+shift+enter - Spawns a terminal window.</li>
</ul>


<p>Thats all for now, going off to D.C later to the Japan Association to meet a friend!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Your Life With dwm]]></title>
    <link href="http://sulvaat.github.com/blog/2012/03/14/speed-up-your-life-with-dwm/"/>
    <updated>2012-03-14T11:57:00-04:00</updated>
    <id>http://sulvaat.github.com/blog/2012/03/14/speed-up-your-life-with-dwm</id>
    <content type="html"><![CDATA[<p>Good X window managers make life good. Unless you're into bloated desktop enviroments a simple X window manager is plenty sufficiant. Here is how to setup a slightly less basic dwm. This is mostly taken from the <a href="https://wiki.archlinux.org/index.php/Dwm#Customizing_config.h">ArchWiki</a> with a few added comments. Some steps have been simplified but helper applications like conky and dmenu have been split up.</p>

<p>First get what we need to install dwm:
```</p>

<h1>pacman -S abs dmenu</h1>

<p>```
If you diddn't already have base-devel selected at install, add it now.</p>

<p>Now copy the scipts from the dwm community:
```</p>

<h1>abs community/dwm</h1>

<p>$ cp -r /var/abs/community/dwm ~/dwm &amp;&amp; cd ~/dwm
<code>
Now that we have a bare copy of dwm in our user directory, lets configure. dwm is mainly configured through its &lt;code&gt;config.h&lt;/code&gt; file.
</code>
/<em> appearance </em>/
static const char font[]            = "-<em>-terminus-medium-r-</em>-<em>-16-</em>-<em>-</em>-<em>-</em>-<em>-</em>";
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#333333";
static const char normfgcolor[]     = "#bbbbbb";
static const char selbordercolor[]  = "#005577";
static const char selbgcolor[]      = "#333333";
static const char selfgcolor[]      = "#3300ff";
static const unsigned int borderpx  = 1;        /<em> border pixel of windows </em>/
static const unsigned int snap      = 32;       /<em> snap pixel </em>/
static const Bool showbar           = True;     /<em> False means no bar </em>/
static const Bool topbar            = True;     /<em> False means bottom bar </em>/
```
Most of it is self explanitory here</p>

<p>For:</p>

<ul>
<li><code>normbgcolor[]</code> I like dark since it is easy to contrast with...but not black so #333333
<li><code>normfgcolor[]</code> I picked a nice shade of blue from a list of web colors (easy to google for) #bbbbbb
<li> also not that I made <code>selbgcolor[]</code> and <code>selfgcolor[]</code> go with the same dark theme.
</ul>


<p>Now lets set a good terminal emulator. I like urxvt just because it was the easiest to make look pretty.
```</p>

<h1>pacman -S rxvt-unicode</h1>

<p><code>
Now lets set dwm to use it when e press &lt;code&gt;alt+shift+enter&lt;/code&gt;
</code>
/<em> commands </em>/
static const char <em>dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char </em>termcmd[]  = { "urxvt", NULL };
```
For the most part you just need to change the line above with urxvt, the rest tells dwm about how to theme dmenu, same as above.</p>

<p>Now lets install (whew!)
<code>
$ makepkg -g &gt;&gt; PKGBUILD
$ makepkg -efi --skipinteg
</code>
Now lets get conky and set it up for our status bar!
```</p>

<h1>pacman -S conky</h1>

<p><code>
Conky needs to have it's output sent to the status bar &lt;code&gt;xsetroot -name&lt;/code&gt;. Add this to your &lt;code&gt;~/.xinitrc&lt;/code&gt;
</code>
conky | while read -r; do xsetroot -name "$REPLY"; done &amp;
exec dwm
<code>
Save and close that, then open up your conkyrc or &lt;code&gt;/etc/conky/conky.conf&lt;/code&gt;. Below is a snipt from mine which is set up for a dual core cpu and wlan0 as the network to display stats from.
</code>
out_to_console yes
out_to_x no
background no
update_interval 2
total_run_times 0
use_spacer none</p>

<p>TEXT
${cpu cpu1}% | ${cpu cpu2}% :: ${acpitemp}c :: ${downspeed wlan0}D | ${upspeed wlan0}U :: ${time %a %b %d %I:%M%P}
```
We are finally finished! Enjoy you're new dwm desktop. I will make another post shortly with the kep combinations and other ways that I have found to speed up workflow.</p>
]]></content>
  </entry>
  
</feed>
